/* DJCE Montpellier — site vêtements, styles bleu/blanc, logo “DJCE Montpellier”, animations */

import React, { useEffect, useRef, useState } from 'react'
import { motion } from 'framer-motion'
import { ShoppingCart } from 'lucide-react'

const PAYPAL_CLIENT_ID = "YOUR_PAYPAL_CLIENT_ID"
const CURRENCY = 'EUR'

const PRODUCTS = [
  { id: 'p1', name: "Tee 'Street'", price: 25.0, tag: 'Tops', img: 'https://picsum.photos/seed/p1/400/400' },
  { id: 'p2', name: "Jean slim", price: 55.0, tag: 'Pantalons', img: 'https://picsum.photos/seed/p2/400/400' },
  { id: 'p3', name: "Hoodie Logo", price: 45.0, tag: 'Sweats', img: 'https://picsum.photos/seed/p3/400/400' },
  { id: 'p4', name: "Casquette Unisexe", price: 18.0, tag: 'Accessoires', img: 'https://picsum.photos/seed/p4/400/400' }
]

function formatPrice(n) {
  return n.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 }) + ' €'
}

function loadPayPalScript(clientId) {
  return new Promise((resolve, reject) => {
    if (!clientId) return reject(new Error('Client ID PayPal manquant'))
    const existing = document.querySelector(`script[data-paypal-client-id="${clientId}"]`)
    if (existing) {
      if (window.paypal) return resolve(window.paypal)
      existing.addEventListener('load', () => resolve(window.paypal))
      existing.addEventListener('error', (e) => reject(e))
      return
    }
    const script = document.createElement('script')
    script.src = `https://www.paypal.com/sdk/js?client-id=${clientId}&currency=${CURRENCY}`
    script.async = true
    script.setAttribute('data-paypal-client-id', clientId)
    script.onload = () => resolve(window.paypal)
    script.onerror = (e) => reject(e)
    document.body.appendChild(script)
  })
}

export default function App() {
  const [products] = useState(PRODUCTS)
  const [cart, setCart] = useState([])
  const [view, setView] = useState('shop')
  const [orderInfo, setOrderInfo] = useState(null)

  function addToCart(product) {
    setCart((c) => {
      const found = c.find((it) => it.id === product.id)
      if (found) return c.map((it) => it.id === product.id ? { ...it, qty: it.qty + 1 } : it)
      return [...c, { ...product, qty: 1 }]
    })
  }

  function removeFromCart(id) {
    setCart((c) => c.filter((it) => it.id !== id))
  }

  function changeQty(id, qty) {
    setCart((c) => c.map((it) => it.id === id ? { ...it, qty } : it).filter(it => it.qty > 0))
  }

  function cartTotal() {
    return cart.reduce((s, it) => s + it.price * it.qty, 0)
  }

  return (
    <div className="min-h-screen bg-blue-600 text-gray-100 font-sans">
      <header className="bg-white shadow-lg">
        <div className="max-w-6xl mx-auto px-4 py-4 flex items-center justify-between">
          <motion.div initial={{ opacity: 0, y: -30 }} animate={{ opacity: 1, y: 0 }} transition={{ duration: 0.6 }} className="flex items-center gap-2">
            <div className="bg-blue-600 p-2 rounded-full">
              <ShoppingCart size={32} className="text-white" />
            </div>
            <h1 className="text-3xl font-extrabold tracking-wide text-white">DJCE <span className="text-gray-200">Montpellier</span></h1>
          </motion.div>
          <nav className="space-x-4">
            <button onClick={() => setView('shop')} className="px-3 py-1 rounded bg-white text-blue-600 hover:bg-gray-100 transition">Boutique</button>
            <button onClick={() => setView('checkout')} className="px-3 py-1 rounded bg-white text-blue-600 hover:bg-gray-100 transition">Commande</button>
            <button onClick={() => { setCart([]); setView('shop') }} className="px-3 py-1 rounded bg-white text-blue-600 hover:bg-gray-100 transition">Vider panier</button>
          </nav>
        </div>
      </header>

      <main className="max-w-6xl mx-auto p-4 grid grid-cols-1 lg:grid-cols-4 gap-6">
        <section className="lg:col-span-3">
          {view === 'shop' && (
            <motion.div initial={{ opacity: 0, y: 20 }} animate={{ opacity: 1, y: 0 }} transition={{ duration: 0.8 }}>
              <h2 className="text-2xl font-semibold mb-4 text-white">Nos produits</h2>
              <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-4">
                {products.map((p, i) => (
                  <motion.article
                    key={p.id}
                    initial={{ opacity: 0, scale: 0.9, y: 30 }}
                    animate={{ opacity: 1, scale: 1, y: 0 }}
                    transition={{ delay: i * 0.15, duration: 0.4 }}
                    className="bg-white rounded-lg shadow-lg p-3 flex flex-col hover:scale-[1.03] transition"
                  >
                    <img src={p.img} alt={p.name} className="w-full h-48 object-cover rounded-md border-2 border-blue-600" />
                    <div className="mt-3 flex-1">
                      <h3 className="font-bold text-lg text-blue-600">{p.name}</h3>
                      <p className="text-sm text-gray-500">{p.tag}</p>
                    </div>
                    <div className="mt-3 flex items-center justify-between">
                      <strong className="text-blue-700">{formatPrice(p.price)}</strong>
                      <button onClick={() => addToCart(p)} className="px-3 py-1 rounded-lg bg-blue-600 text-white font-semibold hover:bg-blue-700 transition">Ajouter</button>
                    </div>
                  </motion.article>
                ))}
              </div>
            </motion.div>
          )}

          {view === 'checkout' && (
            <motion.div initial={{ opacity: 0, y: 30 }} animate={{ opacity: 1, y: 0 }} transition={{ duration: 0.6 }}>
              <h2 className="text-2xl font-semibold mb-4 text-white">Paiement</h2>
              <Checkout
                cart={cart}
                total={cartTotal()}
                onSuccess={(info) => { setOrderInfo(info); setCart([]); setView('thanks') }}
                onError={(err) => alert('Erreur paiement: ' + err)}
              />
            </motion.div>
          )}

          {view === 'thanks' && (
            <motion.div initial={{ opacity: 0, scale: 0.8 }} animate={{ opacity: 1, scale: 1 }} transition={{ duration: 0.6 }} className="bg-white rounded-lg shadow-lg p-6 text-center">
              <h2 className="text-3xl font-extrabold mb-2 text-blue-600">Merci pour votre achat !</h2>
              <p className="mb-4 text-gray-700">Référence de la transaction : <strong>{orderInfo?.id ?? '—'}</strong></p>
              <button onClick={() => setView('shop')} className="px-4 py-2 rounded-lg bg-blue-600 text-white font-semibold hover:bg-blue-700 transition">Retour à la boutique</button>
            </motion.div>
          )}
        </section>

        <aside className="lg:col-span-1">
          <motion.div initial={{ opacity: 0, x: 50 }} animate={{ opacity: 1, x: 0 }} transition={{ duration: 0.6 }} className="bg-white rounded-lg shadow-lg p-4 sticky top-6 border-2 border-blue-600">
            <h3 className="font-semibold text-blue-600">Votre panier</h3>
            {cart.length === 0 && <p className="text-sm text-gray-500">Panier vide</p>}
            <ul className="mt-3 space-y-2">
              {cart.map((it) => (
                <li key={it.id} className="flex items-center justify-between border-b border-blue-200 pb-1">
                  <div>
                    <div className="font-medium text-blue-600">{it.name}</div>
                    <div className="text-xs text-gray-500">{formatPrice(it.price)} x {it.qty}</div>
                  </div>
                  <div className="flex items-center space-x-2">
                    <input type="number" min={1} value={it.qty} onChange={(e) => changeQty(it.id, Math.max(1, Number(e.target.value || 1)))} className="w-12 p-1 border border-blue-600 rounded text-sm" />
                    <button onClick={() => removeFromCart(it.id)} className="text-red-500 text-sm">✕</button>
                  </div>
                </li>
              ))}
            </ul>

            <div className="mt-4 border-t pt-3">
              <div className="flex justify-between font-semibold text-blue-700">Total: <span>{formatPrice(cartTotal())}</span></div>
              <div className="mt-3">
                <button onClick={() => setView('checkout')} disabled={cart.length===0} className={`w-full px-3 py-2 rounded-lg font-bold ${cart.length===0 ? 'bg-gray-300 text-gray-600' : 'bg-blue-600 text-white hover:bg-blue-700 transition'}`}>
                  Commander
                </button>
              </div>
            </div>
          </motion.div>
        </aside>
      </main>

      <footer className="text-center text-sm text-white p-6 bg-blue-700">© DJCE Montpellier — Boutique officielle</footer>
    </div>
  )
}

function Checkout({ cart, total, onSuccess, onError }) {
  const paypalRef = useRef(null)
  const [loading, setLoading] = useState(false)
  const [ready, setReady] = useState(false)

  useEffect(() => {
    if (!cart || cart.length === 0) return

    setLoading(true)
    loadPayPalScript(PAYPAL_CLIENT_ID)
      .then((paypal) => {
        setReady(true)
        if (paypal && paypal.Buttons) {
          paypalRef.current.innerHTML = ''
          paypal.Buttons({
            style: { layout: 'vertical', color: 'blue', shape: 'pill', label: 'paypal' },
            createOrder: (data, actions) => actions.order.create({
              purchase_units: [{ amount: { value: total.toFixed(2), currency_code: CURRENCY } }]
            }),
            onApprove: (data, actions) => {
              setLoading(true)
              return actions.order.capture().then((details) => {
                setLoading(false)
                onSuccess({ id: details.id, payer: details.payer })
              })
            },
            onError: (err) => {
              setLoading(false)
              onError(err)
            }
          }).render(paypalRef.current)
        }
      })
      .catch((err) => {
        setLoading(false)
        onError(err.message)
      })

    return () => { if (paypalRef.current) paypalRef.current.innerHTML = '' }
  }, [cart, total])

  return (
    <motion.div initial={{ opacity: 0, y: 20 }} animate={{ opacity: 1, y: 0 }} transition={{ duration: 0.5 }} className="bg-white rounded-lg shadow-lg p-4 border-2 border-blue-600">
      <h3 className="font-semibold text-blue-600">Résumé de la commande</h3>
      <ul className="mt-3 text-sm text-gray-700">
        {cart.map(it => (
          <li key={it.id} className="flex justify-between">
            <span>{it.name} x{it.qty}</span>
            <span>{formatPrice(it.price * it.qty)}</span>
          </li>
        ))}
      </ul>
      <div className="mt-3 border-t pt-3">
        <div className="flex justify-between font-semibold text-blue-700">Total: <span>{formatPrice(total)}</span></div>
      </div>
      <div className="mt-4" ref={paypalRef} />
      {loading && <div className="mt-2 text-sm text-gray-500">Chargement paiement...</div>}
      {!ready && !loading && <div className="mt-2 text-sm text-gray-500">Le bouton PayPal s'affichera ici.</div>}
    </motion.div>
  )
}
